# -*- coding: utf-8 -*-
"""Ass_v4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PGmYhB0iA6L7dWVfX9tgrjoKDJt20avY
"""

###################         Header          ############################
#
# Aluno: Rodolfo Augusto da Silva Arrda
# NUSP: 6381848
#
# Assignment 2 : enhancement and superresolution
#
# SCC0251/5830— Prof. Moacir A. Ponti
# Teaching Assistant: Leo Sampaio Ferraz Ribeiro
#
###################   Funcoes Auxiliares   ############################

################ Enhancement_opt1

def Enhancement_opt1(img):
  n_levels = np.max(img)
  N,M = img.shape

  hist  = np.zeros(n_levels).astype(int)
  histC = np.zeros(n_levels).astype(int)
  histT = np.zeros(n_levels).astype(np.uint8)

  img_eq = np.zeros([N,M]).astype(np.uint8)
  
  # loop por todas as intensidades
  for i in range(n_levels):
    hist[i] = np.sum(img == i)

  # acumular os valores
  for i in range(n_levels):
    if i == 0:
      histC[i] = hist[i]
    else:
      histC[i] = hist[i] + histC[i-1]

  # transformação
  for z in range(n_levels):
    histT[z] = ((n_levels-1)/float(M*N))*histC[z]

    # imagem equalizada
    img_eq[np.where(img == z)] = histT[z]

  return(img_eq)
  
################ Enhancement_opt2

def Enhancement_opt2(img0,img1,img2,img3):
  
  n_levels = np.max(np.array([[np.max(img0)],[np.max(img1)],[np.max(img2)],[np.max(img3)]]))
  hist  = np.zeros(n_levels).astype(int)
  histC = np.zeros(n_levels).astype(int)

  # loop por todas as intensidades
  for i in range(n_levels):
    hist[i] = np.sum(img0 == i) + np.sum(img1 == i) + np.sum(img2 == i) + np.sum(img3 == i)

  # acumular os valores
  for i in range(n_levels):
    if i == 0:
      histC[i] = hist[i]
    else:
      histC[i] = hist[i] + histC[i-1]

  # transformação img0
  N0,M0 = np.shape(img0)
  img0_eq = np.zeros([N0,M0]).astype(np.uint8)
  histT = np.zeros(n_levels).astype(np.uint8)
  for z in range(n_levels):
    histT[z] = ((n_levels-1)/float(4*M0*N0))*histC[z]
    # imagem equalizada
    img0_eq[np.where(img0 == z)] = histT[z]

  # transformação img1
  N1,M1 = np.shape(img1)
  img1_eq = np.zeros([N1,M1]).astype(np.uint8)
  histT = np.zeros(n_levels).astype(np.uint8)
  for z in range(n_levels):
    histT[z] = ((n_levels-1)/float(4*M1*N1))*histC[z]
    # imagem equalizada
    img1_eq[np.where(img1 == z)] = histT[z]  
  
  # transformação img2
  N2,M2 = np.shape(img2)
  img2_eq = np.zeros([N2,M2]).astype(np.uint8)
  histT = np.zeros(n_levels).astype(np.uint8)
  for z in range(n_levels):
    histT[z] = ((n_levels-1)/float(4*M2*N2))*histC[z]
    # imagem equalizada
    img2_eq[np.where(img2 == z)] = histT[z]  

  # transformação img3
  N3,M3 = np.shape(img3)
  img3_eq = np.zeros([N3,M3]).astype(np.uint8)
  histT = np.zeros(n_levels).astype(np.uint8)
  for z in range(n_levels):
    histT[z] = ((n_levels-1)/float(4*M3*N3))*histC[z]
    # imagem equalizada
    img3_eq[np.where(img3 == z)] = histT[z]  

  return(img0_eq,img1_eq,img2_eq,img3_eq)

################ Enhancement_opt3
  
def Enhancement_opt3(img,gamma):

  N,M = img.shape
  img_eq = np.zeros([N,M]).astype(np.uint8)

  img_eq  = 255*((img / 255.0)**(1/gamma))

  return(img_eq)
  
################ Superresolution
  
def Superresolution(img0,img1,img2,img3):
  N,M = img0.shape
  img_eq = np.zeros([2*N,2*M],dtype=float)

  for i in range(N):
    for j in range(M):
      img_eq[2*i,2*j]     = img0[i,j] 
      img_eq[2*i+1,2*j]   = img1[i,j]
      img_eq[2*i,2*j+1]   = img2[i,j]
      img_eq[2*i+1,2*j+1] = img3[i,j]

  return(img_eq) 

################ Erro
	
def Tratamento(F,imglow0,imglow1,imglow2,imglow3,imghigh,gamma):
	N,M = imghigh.shape
	SR = np.zeros([N,M]).astype(np.uint8)

	if F == 0:
		SR = Superresolution(imglow0,imglow1,imglow2,imglow3)

	elif F == 1:
		I0_opt1 = Enhancement_opt1(imglow0)
		I1_opt1 = Enhancement_opt1(imglow1)
		I2_opt1 = Enhancement_opt1(imglow2)
		I3_opt1 = Enhancement_opt1(imglow3)
		SR = Superresolution(I0_opt1,I1_opt1,I2_opt1,I3_opt1)
		
	elif F == 2:
		I0_opt2,I1_opt2,I2_opt2,I3_opt2 = Enhancement_opt2(imglow0,imglow1,imglow2,imglow3)
		SR = Superresolution(I0_opt2,I1_opt2,I2_opt2,I3_opt2)
		
	elif F == 3:
		I0_opt3 = Enhancement_opt3(imglow0,gamma)
		I1_opt3 = Enhancement_opt3(imglow1,gamma)
		I2_opt3 = Enhancement_opt3(imglow2,gamma)
		I3_opt3 = Enhancement_opt3(imglow3,gamma)
		SR = Superresolution(I0_opt3,I1_opt3,I2_opt3,I3_opt3)
		
	return(SR)  


#######################################################################  

if __name__ == "__main__":
	import numpy as np
	import imageio
	import sys
	
	low   = input().rstrip()
	high  = input().rstrip()
	F     = int(input())
	gamma = float(input())
	
	#load images
	#imglow0 = imageio.imread('C:\\Users\\rodol\\Desktop\\case2\\ImagensParaTestes\\' + low + '0.png')
	imglow0 = imageio.imread(low + '0.png')
	#imglow1 = imageio.imread('C:\\Users\\rodol\\Desktop\\case2\\ImagensParaTestes\\' + low + '1.png')
	imglow1 = imageio.imread(low + '1.png')
	#imglow2 = imageio.imread('C:\\Users\\rodol\\Desktop\\case2\\ImagensParaTestes\\' + low + '2.png')
	imglow2 = imageio.imread(low + '2.png')
	#imglow3 = imageio.imread('C:\\Users\\rodol\\Desktop\\case2\\ImagensParaTestes\\' + low + '3.png')
	imglow3 = imageio.imread(low + '3.png')
	#imghigh = imageio.imread('C:\\Users\\rodol\\Desktop\\case2\\ImagensParaTestes\\' + high ).astype(float)
	imghigh = imageio.imread(high )
	
	N,M = imghigh.shape
	SR_t = np.zeros([N,M],dtype=float)
	
	
	SR_t = Tratamento(F,imglow0,imglow1,imglow2,imglow3,imghigh,gamma)
	Erro = np.round(np.sqrt(np.sum((imghigh-SR_t)**2))/(512),4)
	# Resultado Esperado
	print(Erro)

