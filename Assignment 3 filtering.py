# -*- coding: utf-8 -*-
"""Ass_v4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PGmYhB0iA6L7dWVfX9tgrjoKDJt20avY
"""

###################         Header          ############################
#
# Aluno: Rodolfo Augusto da Silva Arrda
# NUSP: 6381848
#
# Assignment 3: filtering
#
# SCC0251/5830â€” Prof. Moacir A. Ponti
# Teaching Assistant: Leo Sampaio Ferraz Ribeiro
#
###################   Funcoes Auxiliares   ############################

################ F1D

def F1D(img,len_f,w_vec):

  N,M = img.shape
  img_f = img.flatten()
  center = int(np.trunc(len_f/2))
  vec_pad = np.pad(img_f,center,mode='wrap')

  vec_final = np.zeros(img_f.size).astype(float)

  for i in range(vec_final.size):
    vec_final[i] = np.dot(vec_pad[i:i+len_f],w_vec)
 
 
  return((((vec_final - vec_final.min())/(vec_final.max() - vec_final.min()))*255).astype(np.uint8).reshape(N,M))

################ F2D

def F2D(img,len_f,w_mat):

  N,M = img.shape
  center = int(np.trunc(len_f/2))
  vec_pad = np.pad(img,center,mode='symmetric')

  vec_final = np.zeros([N,M]).astype(float)

  for i in range(M):
    for j in range(N):
      vec_final[i,j] = np.sum(np.multiply(vec_pad[i:i+len_f,j:j+len_f],w_mat))

  return((((vec_final - vec_final.min())/(vec_final.max() - vec_final.min()))*255).astype(np.uint8))
  
  
################ F3- Median
  
def FMedian(img,len_f):

  N,M = img.shape
  center = int(np.trunc(len_f/2))
  vec_pad = np.pad(img,center,mode='constant')

  vec_final = np.zeros([N,M]).astype(float)

  for i in range(M):
    for j in range(N):
      vec_final[i,j] = np.median(vec_pad[i:i+len_f,j:j+len_f])

  return((((vec_final - vec_final.min())/(vec_final.max() - vec_final.min()))*255).astype(np.uint8))


#######################################################################  

if __name__ == "__main__":
	import numpy as np
	import imageio
	import sys
	
	imagem = input().rstrip()
	tipo   = input().rstrip()
	len_f  = int(input().rstrip())

	#load image
	#img = imageio.imread('C:\\Users\\rodol\\Desktop\\case3\\ImagensParaCasosDeTeste-2\\' + imagem)
	img = imageio.imread(imagem)
	N,M = img.shape
	matriz_trat  = np.zeros([N,M],dtype=float)
	
	if tipo == '1':

		w_vec  = np.array((input().rstrip().split())).astype(float)		

		matriz_trat = F1D(img,len_f,w_vec)
	
	elif tipo == '2':
		list = []
		for i in range(len_f):
			list.append(input().rstrip().split())
	
		w_mat = np.matrix(list).astype(float)

		matriz_trat = F2D(img,len_f,w_mat)
		
	elif tipo == '3':
		
		matriz_trat = FMedian(img,len_f)
	
	Erro = np.round(np.sqrt(np.sum((img.astype(float)-matriz_trat.astype(float))**2)/(N*M)),4)
	# Resultado Esperado
	print(Erro)
	
	


